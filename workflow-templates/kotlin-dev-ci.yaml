name: dev ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test:
    runs-on: [self-hosted, linux, dind, woking]
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # run-on-host will have the deps cached
      - name: Cache Gradle packages
        uses: tespkg/actions-cache@v1
        with:
          endpoint: s3.meera.tech
          accessKey: YOURACCESSKEY
          secretKey: YOURSECRETKEY
          bucket: actions-cache
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Lint
        run: |
          ./gradlew ktlintCheck

      - name: Unit test
        run: ./gradlew test

      - name: Coverage
        run: ./gradlew jacocoTestReport

      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Commit and push the badge (if it changed)
        uses: EndBug/add-and-commit@v7
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          default_author: github_actions
          message: "Autogenerated JaCoCo coverage badge"
          add: "*.svg"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html

      - name: Build jar
        run: ./gradlew installDist

      - name: Docker image name env
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "GITLAB_IMAGE_NAME=registry.gitlab.com/target-digital-transformation/df/dynamic-catalog-service/github:${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build docker image
        run: |
          cd build/install/dynamic-catalog-service
          ls -R
          docker build -f- -t $IMAGE_NAME . <<EOF
          FROM registry.tespkg.in/library/openjdk:11-jre-slim
          LABEL org.opencontainers.image.source=https://github.com/${GITHUB_REPOSITORY}
          COPY . /usr/local/dynamic-catalog-service
          WORKDIR /usr/local/dynamic-catalog-service
          CMD ["/usr/local/dynamic-catalog-service/bin/dynamic-catalog-service"]
          EOF

      - name: Push image to github container registry
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ secrets.CR_USER }} --password-stdin
          docker push $IMAGE_NAME

      - name: Push image to gitlab registry
        run: |
          echo ${{ secrets.GITLAB_CR_PAT }} | docker login registry.gitlab.com -u ${{ secrets.GITLAB_CR_USER }} --password-stdin
          docker tag $IMAGE_NAME $GITLAB_IMAGE_NAME
          docker push $GITLAB_IMAGE_NAME
