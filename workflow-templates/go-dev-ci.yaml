name: dev ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test:
    runs-on: [self-hosted, linux]
    services:
      postgres:
        image: postgres:12.2-alpine
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: runner
          POSTGRES_DB: unittest
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - uses: tespkg/actions-cache@v1
        with:
          endpoint: s3.meera.tech
          accessKey: YOURACCESSKEY
          secretKey: YOURSECRETKEY
          bucket: actions-cache
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build main
        run: |
          CGO_ENABLED=0 go build -o main runtime/main.go

      - name: Test
        run: go test ./...
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: "runner"
          POSTGRES_DB: unittest

      - name: Docker image name env
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "GITLAB_IMAGE_NAME=registry.gitlab.com/target-digital-transformation/thin-section-project/github:${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build docker image
        # permission change due to: actions/upload-artifact#38
        run: |
          chmod +x thinsection
          docker build -f- -t $IMAGE_NAME . <<EOF
          FROM alpine
          LABEL org.opencontainers.image.source=https://github.com/${GITHUB_REPOSITORY}
          COPY thinsection /
          ENTRYPOINT ["/thinsection"]
          EOF

      - name: Push image to github container registry
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ secrets.CR_USER }} --password-stdin
          docker push $IMAGE_NAME

      - name: Push image to gitlab registry
        run: |
          echo ${{ secrets.GITLAB_CR_PAT }} | docker login registry.gitlab.com -u ${{ secrets.GITLAB_CR_USER }} --password-stdin
          docker tag $IMAGE_NAME $GITLAB_IMAGE_NAME
          docker push $GITLAB_IMAGE_NAME

  deploy_to_dev:
    runs-on: [self-hosted, linux]
    needs:
      - package_docker
    steps:
      - name: Push to ArgoCD
        run: |
          echo "TODO"
          echo "$IMAGE_NAME"
          echo "$GITLAB_IMAGE_NAME"
          echo ${{ env.IMAGE_NAME }}
          echo ${{ env.GITLAB_IMAGE_NAME }}
