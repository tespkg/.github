name: dev ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test_package:
    runs-on: [self-hosted, linux]
    # services:
    #   redis:
    #     image: redis
    #     ports:
    #       - 6379:6379

    steps:
      - uses: actions/checkout@v2
        # with:
        #   lfs: true

      # if build & test is not needed, setup python, etc is not needed either
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            # ~/.cache/torch # this is this repo specific. pytorch models
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Format
        run: black .

      - name: Lint
        run: flake8 .

      - name: Test
        run: |
          cp env.example .env
          make test-ci
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Docker image name env
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "GITLAB_IMAGE_NAME=registry.gitlab.com/target-digital-transformation/thin-section-project/github:${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build docker image
        run: |
          docker build -t $IMAGE_NAME .

      - name: Push image to github container registry
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ secrets.CR_USER }} --password-stdin
          docker push $IMAGE_NAME

      - name: Push image to gitlab registry
        # if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo ${{ secrets.GITLAB_CR_PAT }} | docker login registry.gitlab.com -u ${{ secrets.GITLAB_CR_USER }} --password-stdin
          docker tag $IMAGE_NAME $GITLAB_IMAGE_NAME
          docker push $GITLAB_IMAGE_NAME

  deploy_to_dev:
    runs-on: [self-hosted, linux]
    needs:
      - build_test_package
    steps:
      - name: Push to ArgoCD
        run: |
          echo "TODO"
          echo "$IMAGE_NAME"
          echo "$GITLAB_IMAGE_NAME"
          echo ${{ env.IMAGE_NAME }}
          echo ${{ env.GITLAB_IMAGE_NAME }}
